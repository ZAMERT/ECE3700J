`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2024/11/20 12:07:44
// Design Name: 
// Module Name: InstructionMemory
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module InstructionMemory(
    input wire [31:0] PC,
    output reg [31:0] instruction
    );

    reg [31:0] rom[127:0];
    integer i;

    initial begin
        
        for (i = 0; i < 128; i = i + 1) begin
            rom[i] = 32'b0;
        end
        rom[0] = 32'b00111001100100000000001100010011;
        rom[1] = 32'b00000000011000000010001000100011;
        rom[2] = 32'b00000000010000000000001010000011;
        rom[3] = 32'b00000000010100000010000000100011;
        rom[4] = 32'b00000010000000110000000001100011;
        rom[5] = 32'b00000000000000000010111000000011;
        rom[6] = 32'b00000001110000101001110001100011;
        rom[7] = 32'b00000001110000101000001110110011;
        rom[8] = 32'b00000001110000111111001100110011;
        rom[9] = 32'b00000000000000111111001100010011;
        rom[10] = 32'b01000000000000110000001010110011;
        rom[11] = 32'b00000000011000101101010001100011;
        rom[12] = 32'b00000000000000000000001110110011;
        rom[13] = 32'b00000000110000000000000011101111;
        rom[14] = 32'b00000001010000000000000011101111;
        rom[15] = 32'b00000000000000000000111000110011;
        rom[16] = 32'b00000000011111100110111000110011;
        rom[17] = 32'b00000000000000001000000001100111;
        rom[18] = 32'b00000100100000000000001100010011;
        rom[19] = 32'b000001010110000000000001010010011;
    end

    always @(*) begin
        instruction = rom[(PC>>2)];
    end

endmodule
